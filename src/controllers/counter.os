
&HTTPMethod("GET")
Функция list() Экспорт

	ПараметрыЗамера = ЗамерыВремени.НачатьЗамер(ЗапросHTTP.Путь, ЗапросHTTP.СтрокаЗапроса, "counter", "list");

	ТипОбъектов = Неопределено;

	Если ТипЗнч(ЗначенияМаршрута) = Тип("Соответствие") Тогда
		ТипОбъектов = ЗначенияМаршрута.Получить("type");
	КонецЕсли;

	ЗамерыВремени.ЗафиксироватьПодготовкуПараметров(ПараметрыЗамера);

	Результат = ПолучениеСчетчиков.Список(ТипОбъектов);

	ЗамерыВремени.ЗафиксироватьОкончаниеЗамера(ПараметрыЗамера);

	Возврат Содержимое(Результат);

КонецФункции // list()

&HTTPMethod("GET")
Функция get() Экспорт

	ПараметрыЗамера = ЗамерыВремени.НачатьЗамер(ЗапросHTTP.Путь, ЗапросHTTP.СтрокаЗапроса, "counter", "get");

	ТипОбъектов = Неопределено;
	Счетчик = Неопределено;

	Если ТипЗнч(ЗначенияМаршрута) = Тип("Соответствие") Тогда
		ТипОбъектов = ЗначенияМаршрута.Получить("type");
		Счетчик = ЗначенияМаршрута.Получить("counter");
	КонецЕсли;
	
	ПараметрыЗапроса = ЗапросHTTP.ПараметрыЗапроса();

	Формат = "json";
	Если НЕ ПараметрыЗапроса["format"] = Неопределено Тогда
		Формат = ПараметрыЗапроса["format"];
	КонецЕсли;

	Фильтр = ОбщегоНазначения.ФильтрИзПараметровЗапроса(ПараметрыЗапроса);

	Первые = ОбщегоНазначения.ВыборкаПервыхИзПараметровЗапроса(ПараметрыЗапроса);

	Измерения = "";
	Если НЕ ПараметрыЗапроса["dim"] = Неопределено Тогда
		Измерения = ПараметрыЗапроса["dim"];
	КонецЕсли;

	АгрегатнаяФункция = "count";
	Если НЕ ПараметрыЗапроса["aggregate"] = Неопределено Тогда
		АгрегатнаяФункция = ПараметрыЗапроса["aggregate"];
	КонецЕсли;

	ПараметрыСчетчиков = ПолучениеСчетчиков.ПараметрыСчетчиков();
	ПараметрыСчетчика = ПараметрыСчетчиков[ТипОбъектов];

	Поля = "";

	Для Каждого ТекИзмерение Из ПараметрыСчетчика["dimentions"] Цикл
		Если ТекИзмерение.Значение["name_rac"] = Неопределено Тогда
			ИмяПоля = ТекИзмерение.Ключ;
		Иначе
			ИмяПоля = ТекИзмерение.Значение["name_rac"];
		КонецЕсли;
		Поля = Поля + ?(ЗначениеЗаполнено(Поля), ", ", "") + ИмяПоля;
	КонецЦикла;

	Для Каждого ТекСчетчик Из ПараметрыСчетчика["counters"] Цикл
		Если ТекСчетчик.Значение["name_rac"] = Неопределено Тогда
			ИмяПоля = ТекСчетчик.Ключ;
		Иначе
			ИмяПоля = ТекСчетчик.Значение["name_rac"];
		КонецЕсли;
		Если ЗначениеЗаполнено(Счетчик) И НЕ ВРег(Счетчик) = ВРег(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		Поля = Поля + ?(ЗначениеЗаполнено(Поля), ", ", "") + ИмяПоля;
	КонецЦикла;

	Поля = ?(ЗначениеЗаполнено(Поля), Поля, "_all");

	ЗамерыВремени.ЗафиксироватьПодготовкуПараметров(ПараметрыЗамера);

	Если ТипОбъектов = "cluster" Тогда
		Данные = ПодключенияКАгентам.Кластеры(Поля, Фильтр, Истина);
	ИначеЕсли ТипОбъектов = "server" Тогда
		Данные = ПодключенияКАгентам.Серверы(Поля, Фильтр, Истина);
	ИначеЕсли ТипОбъектов = "process" Тогда
		Данные = ПодключенияКАгентам.Процессы(Поля, Фильтр, , Истина);
	ИначеЕсли ТипОбъектов = "infobase" Тогда
		Данные = ПодключенияКАгентам.ИнформационныеБазы(Поля, Фильтр, Истина);
	ИначеЕсли ТипОбъектов = "session" Тогда
		Данные = ПодключенияКАгентам.Сеансы(Поля, Фильтр, , Истина);
	ИначеЕсли ТипОбъектов = "connection" Тогда
		Данные = ПодключенияКАгентам.Соединения(Поля, Фильтр, , Истина);
	Иначе
		Возврат Содержимое(СтрШаблон("Не обнаружены данные для типа объектов ""%1""!", ТипОбъектов));
	КонецЕсли;
	
	Результат = ПолучениеСчетчиков.Счетчики(Данные,
	                                        ТипОбъектов,
	                                        Счетчик,
	                                        Первые,
	                                        Измерения,
	                                        АгрегатнаяФункция,
	                                        Формат);

	ЗамерыВремени.ЗафиксироватьОкончаниеЗамера(ПараметрыЗамера);

	Возврат Содержимое(Результат);

КонецФункции // get()
