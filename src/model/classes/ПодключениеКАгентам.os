// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/hirac/
// ----------------------------------------------------------

#Использовать irac
#Использовать cpdb

Перем Агенты;                      // - Соответствие   - доступные агенты подключения к RAS
Перем ОписанияКластеров;           // - Соответствие   - кэш описаний кластеров
Перем ОписанияСерверов;            // - Соответствие   - кэш описаний рабочих серверов
Перем ОписанияРабочихПроцессов;    // - Соответствие   - кэш описаний рабочих процессов
Перем ОписанияИнформационныхБаз;   // - Соответствие   - кэш описаний информационных баз
Перем ОписанияСеансов;             // - Соответствие   - кэш описаний сеансов
Перем ОписанияСоединений;          // - Соответствие   - кэш описаний соединений
Перем ОписанияТаблицСУБД;          // - Соответствие   - кэш описаний таблиц СУБД
Перем ОписанияСтруктурыХраненияИБ; // - Соответствие   - кэш описаний структуры хранения ИБ

Перем ТипыОбъектовКластера1С;      // - Структура      - перечисление типов объектов кластера

#Область ПрограммныйИнтерфейс

// Функция - возвращает структуру с подключениями к агентам управления кластерами
//
// Возвращаемое значение:
//   Структура     - структура с подключениями к агентам управления кластерами
//
Функция Агенты() Экспорт
	
	Возврат Агенты;

КонецФункции // Агенты()

// Функция - получает описания объектов кластера указанного типа
//
// Параметры:
//   ТипОбъекта    - Строка         - тип объектов кластера к получению
//   Обновить      - Булево         - флаг принудительного обновления списка объектов от сервиса RAS
//   Поля          - Строка         - список получаемых полей, разделенный ","
//                                    спец. значения: "_all" - все поля, "_summary" - основные поля для ИБ и соединений
//   Фильтр        - Соответствие         - набор фильтров для значений полей объекта
//     <Ключ>        - Строка               - имя поля
//     <Значение>    - Массив из Структура    - набор сравнений (фильтр для поля)
//       * Оператор    - Строка                 - оператор сравнения
//       * Значение    - Произвольный           - значение для сравнения
//
// Возвращаемое значение:
//   Массив    - набор объектов кластера
//
Функция ОписанияОбъектовКластера(Знач ТипОбъекта, Знач Обновить = Ложь,
	                             Знач Поля = "_all", Знач Фильтр = Неопределено) Экспорт

	ОбновитьКэшОписанийОбъектовКластеров(ТипОбъекта, Обновить);
	
	КэшОписанийОбъектов = КэшОписанийОбъектовКластера(ТипОбъекта);

	Результат = Новый Массив();

	ОбновленныеОписания = Новый Соответствие();

	Для Каждого ТекОписаниеОбъекта Из КэшОписанийОбъектов Цикл

		// При необходимости получаем полное описание ИБ или соединения и сохраняем в кэш
		ЗаполнитьРасширенноеОписаниеОбъекта(ТипОбъекта, ТекОписаниеОбъекта.Значение, Поля, ОбновленныеОписания);

		Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Таблицы) Тогда
			ОписаниеОбъектаДляВывода = Неопределено;
		Иначе
			ОписаниеОбъектаДляВывода = ОбновленныеОписания[ТекОписаниеОбъекта.Значение["_thisObject"].Ид()];
		КонецЕсли;
		Если ОписаниеОбъектаДляВывода = Неопределено Тогда
			ОписаниеОбъектаДляВывода = ТекОписаниеОбъекта.Значение;
		КонецЕсли;

		Если НЕ ОбщегоНазначения.ОбъектСоответствуетФильтру(ОписаниеОбъектаДляВывода, Фильтр) Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеОбъекта = ОписаниеОбъектаКластера(ТипОбъекта, ОписаниеОбъектаДляВывода, Поля);

		Результат.Добавить(ОписаниеОбъекта);

	КонецЦикла;

	Для Каждого ТекОписаниеОбъекта Из ОбновленныеОписания Цикл
		КэшОписанийОбъектов.Вставить(ТекОписаниеОбъекта.Ключ, ТекОписаниеОбъекта.Значение);
	КонецЦикла;

	Возврат Результат;

КонецФункции // ОписанияОбъектовКластера()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ПолучениеДанныхСервисаАдминистрирования

// Процедура инициализирует подключения к агентам управления кластерами
//
// Параметры:
//   НастройкиПодключения     - Строка      - путь к файлу настроек управления кластерами
//                              Структура     или структура настроек управления кластерами
//
Процедура ИнициализироватьАгентыУправленияКластерами(Знач НастройкиПодключения = Неопределено)
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Структура")
	 ИЛИ ТипЗнч(НастройкиПодключения) = Тип("Строка") Тогда
		Настройки.Инициализация(НастройкиПодключения);
	КонецЕсли;

	ПараметрыПодключения = Настройки.ПараметрыПодключения();

	Агенты = Новый Соответствие();

	Для Каждого ТекИд Из ПараметрыПодключения.ИдентификаторыАгентов Цикл
	
		ПараметрыАгента = ПараметрыПодключения.Агенты[ТекИд];

		АвторизацияАгента = Новый Структура("Администратор, Пароль");
		АвторизацияАгента.Вставить("Администратор", ПараметрыАгента.Администратор);
		АвторизацияАгента.Вставить("Пароль"       , ПараметрыАгента.Пароль);

		УправлениеКластером = Новый УправлениеКластером1С(ПараметрыАгента.ВерсияКлиента,
		                                                  ПараметрыАгента.АдресСервиса,
		                                                  АвторизацияАгента);

		ОписаниеАгента = ОписаниеАгента(ТекИд, ПараметрыАгента.Резервирует, УправлениеКластером);

		Агенты.Вставить(ВРег(ТекИд), ОписаниеАгента);

		ИнициализироватьКластерыАгента(ОписаниеАгента);

	КонецЦикла;

КонецПроцедуры // ИнициализироватьАгентыУправленияКластерами()

// Функция - получает описания кластеров агента
//
// Параметры:
//   Агент    - УправлениеКластером1С    - объект управления кластером 1С
//
// Возвращаемое значение:
//   Соответствие                     - список описаний кластеров
//     <Ключ>        - Строка           - идентификатор кластера
//     <Значение>    - Соответствие     - описание кластера
//
Функция ПолныеОписанияКластеровАгента(Знач Агент)

	ОписанияОбъектовАгента = Новый Соответствие();

	СписокКластеров = Агент.Кластеры().Список(, -1, Истина);

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипыОбъектовКластера1С.Кластеры);

	Для Каждого ТекКластер Из СписокКластеров Цикл

		ПолноеОписаниеОбъекта = Новый Соответствие();
		ПолноеОписаниеОбъекта.Вставить("_thisObject", ТекКластер["_thisObject"]);

		Для й = 0 По ПоляОбъекта.ВГраница() Цикл
			
			ТекПолеОбъекта = ПоляОбъекта[й];

			ИмяПоля = ТекПолеОбъекта.ИмяРАК;

			ЗначениеЭлемента = ТекКластер[ТекПолеОбъекта.Имя];

			ПолноеОписаниеОбъекта.Вставить(ИмяПоля, ЗначениеЭлемента);

			РасширитьПолеОбъектаКластера(ПолноеОписаниеОбъекта, ИмяПоля, ТипыОбъектовКластера1С.Кластеры, ТекКластер);

		КонецЦикла;

		ДополнитьОписаниеОбъектаКластера(ПолноеОписаниеОбъекта, ТипыОбъектовКластера1С.Кластеры, Агент, ТекКластер);

		ОписанияОбъектовАгента.Вставить(ПолноеОписаниеОбъекта["cluster"], ПолноеОписаниеОбъекта);

	КонецЦикла;

	Возврат ОписанияОбъектовАгента;

КонецФункции // ПолныеОписанияКластеровАгента()

// Функция - получает описания объектов указанного типа от кластеров агента
//
// Параметры:
//   ОписаниеАгента   - Структура               - описание агента управления кластером 1С
//     *Имя             - Строка                  - имя агента управления кластером 1С
//     *Резервирует     - Строка                  - имя резервируемого агента управления кластером 1С
//     *Агент           - УправлениеКластером1С   - объект управления кластером 1С
//     *Кластеры        - Массив                  - список кластеров агента
//   ТипОбъекта       - Строка                  - тип объектов кластера к получению
//
// Возвращаемое значение:
//   Соответствие                     - список описаний объектов
//     <Ключ>        - Строка           - идентификатор объекта
//     <Значение>    - Соответствие     - описание объекта
//
Функция ПолныеОписанияОбъектовАгента(Знач ОписаниеАгента, Знач ТипОбъекта)

	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Кластеры) Тогда
		Возврат ПолныеОписанияКластеровАгента(ОписаниеАгента.Агент);
	КонецЕсли;

	ПолныеОписанияОбъектов = Новый Соответствие();

	СписокКластеров = ОписаниеАгента.Кластеры;

	Для Каждого ТекКластер Из СписокКластеров Цикл

		ПолныеОписанияОбъектовКластера = ПолныеОписанияОбъектовКластера(ТекКластер, ТипОбъекта, ОписаниеАгента.Агент);

		Для Каждого ТекОписаниеОбъекта Из ПолныеОписанияОбъектовКластера Цикл
		
			ПолныеОписанияОбъектов.Вставить(ТекОписаниеОбъекта[ТипОбъекта], ТекОписаниеОбъекта);

		КонецЦикла;

	КонецЦикла;

	Возврат ПолныеОписанияОбъектов;

КонецФункции // ПолныеОписанияОбъектовАгента()

// Функция - получает описания объектов указанного типа от кластеров агента
//
// Параметры:
//   Кластер           - Кластер                  - объект-кластер 1С
//   ТипОбъекта        - Строка                   - тип объектов кластера к получению
//   Агент             - УправлениеКластером1С    - объект управления кластером 1С
//
// Возвращаемое значение:
//   Соответствие                     - список описаний объектов
//     <Ключ>        - Строка           - идентификатор объекта
//     <Значение>    - Соответствие     - описание объекта
//
Функция ПолныеОписанияОбъектовКластера(Знач Кластер, Знач ТипОбъекта, Знач Агент)

	ПолныеОписанияОбъектов = Новый Массив();
	
	СписокОбъектовКластера = Кластер.Получить(ТипОбъекта).Список(, , Истина);

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипОбъекта);

	Для Каждого ТекОбъектКластера Из СписокОбъектовКластера Цикл

		ПолноеОписаниеОбъекта = Новый Соответствие();
		ПолноеОписаниеОбъекта.Вставить("_thisObject", ТекОбъектКластера["_thisObject"]);

		Для й = 0 По ПоляОбъекта.ВГраница() Цикл
			
			ТекПолеОбъекта = ПоляОбъекта[й];

			ИмяПоля = ТекПолеОбъекта.ИмяРАК;

			ЗначениеЭлемента = ТекОбъектКластера[ТекПолеОбъекта.Имя];
			
			ПолноеОписаниеОбъекта.Вставить(ИмяПоля, ЗначениеЭлемента);

			РасширитьПолеОбъектаКластера(ПолноеОписаниеОбъекта,
			                             ИмяПоля,
			                             ТипОбъекта,
			                             ТекОбъектКластера);

		КонецЦикла;

		ДополнитьОписаниеОбъектаКластера(ПолноеОписаниеОбъекта, ТипОбъекта, Агент, Кластер);

		ПолныеОписанияОбъектов.Добавить(ПолноеОписаниеОбъекта);

	КонецЦикла;

	Возврат ПолныеОписанияОбъектов;
	
КонецФункции // ПолныеОписанияОбъектовКластера()

// Процедура - добавляет служебные поля объекта кластера, связанные с указанным полем
//
// Параметры:
//   ПолноеОписаниеОбъекта    - Соответствие      - описание объекта кластера 1С
//   ИмяПоля                  - Строка            - имя поля, для которого добавляются дополнительные служебные поля
//   ТипОбъекта               - Строка            - тип объектов кластера к получению
//   ОбъектКластера           - ОбъектКластера    - объект кластера 1С, к которому добавляются служебные поля
//
Процедура РасширитьПолеОбъектаКластера(ПолноеОписаниеОбъекта, ИмяПоля, ТипОбъекта, ОбъектКластера)

	Если ТипОбъекта = ТипыОбъектовКластера1С.Кластеры
	   И ВРег(ИмяПоля) = "CLUSTER" Тогда
		АдресСервера = ОбъектКластера.Получить("АдресСервера");
		ПортСервера  = ОбъектКластера.Получить("ПортСервера");
		МеткаКластера = СтрШаблон("%1:%2", АдресСервера, ПортСервера);
		ПолноеОписаниеОбъекта.Вставить("cluster-label", МеткаКластера);
	КонецЕсли;

	Если ТипОбъекта = ТипыОбъектовКластера1С.Серверы
	   И ВРег(ИмяПоля) = "SERVER" Тогда
		АдресСервера = ОбъектКластера.Получить("АдресАгента");
		ПортСервера  = ОбъектКластера.Получить("ПортАгента");
		МеткаСервера = СтрШаблон("%1:%2", АдресСервера, ПортСервера);
		ПолноеОписаниеОбъекта.Вставить("server-host" , АдресСервера);
		ПолноеОписаниеОбъекта.Вставить("server-label", МеткаСервера);
	КонецЕсли;

	Если ТипОбъекта = ТипыОбъектовКластера1С.РабочиеПроцессы
	   И ВРег(ИмяПоля) = "PROCESS" Тогда
		АдресСервера = ОбъектКластера.Получить("АдресСервера");
		ПортСервера  = ОбъектКластера.Получить("ПортСервера");
		МеткаПроцесса = СтрШаблон("%1:%2", АдресСервера, ПортСервера);
		ПолноеОписаниеОбъекта.Вставить("process-host" , АдресСервера);
		ПолноеОписаниеОбъекта.Вставить("process-label", МеткаПроцесса);
	КонецЕсли;

	Если ТипОбъекта = ТипыОбъектовКластера1С.Сеансы 
	 ИЛИ ТипОбъекта = ТипыОбъектовКластера1С.Соединения Тогда
		Если ВРег(ИмяПоля) = "INFOBASE" Тогда
			ПолноеОписаниеОбъекта.Вставить("infobase-label", "_none");
			ОписаниеИБ = ПолучитьОписаниеОбъектаИзКэша(ПолноеОписаниеОбъекта[ИмяПоля],
			                                           ТипыОбъектовКластера1С.ИнформационныеБазы);
			Если НЕ ОписаниеИБ = Неопределено Тогда
				ПолноеОписаниеОбъекта.Вставить("infobase-label", ОписаниеИБ["name"]);
			КонецЕсли;
		ИначеЕсли ВРег(ИмяПоля) = "PROCESS" Тогда
			ПолноеОписаниеОбъекта.Вставить("process-label", "_none");
			ПолноеОписаниеОбъекта.Вставить("process-host" , "_none");
			ОписаниеПроцесса = ПолучитьОписаниеОбъектаИзКэша(ПолноеОписаниеОбъекта[ИмяПоля],
			                                                 ТипыОбъектовКластера1С.РабочиеПроцессы);
			Если НЕ ОписаниеПроцесса = Неопределено Тогда
				МеткаПроцесса = СтрШаблон("%1:%2", ОписаниеПроцесса["host"], ОписаниеПроцесса["port"]);
				ПолноеОписаниеОбъекта.Вставить("process-label", МеткаПроцесса);
				ПолноеОписаниеОбъекта.Вставить("process-host" , ОписаниеПроцесса["host"]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ВРег(ИмяПоля) = "NAME"
	 ИЛИ ВРег(ИмяПоля) = "APPLICATION"
	 ИЛИ ВРег(ИмяПоля) = "DESCR" Тогда
		ОбщегоНазначения.УбратьКавычки(ПолноеОписаниеОбъекта[ИмяПоля]);
	ИначеЕсли ВРег(ИмяПоля) = "STARTED-AT"
	      ИЛИ ВРег(ИмяПоля) = "CONNECTED-AT" Тогда
		Попытка
			ПолноеОписаниеОбъекта.Вставить("duration", ТекущаяДата() - ПолноеОписаниеОбъекта[ИмяПоля]);
		Исключение
			ПолноеОписаниеОбъекта.Вставить("duration", 0);
		КонецПопытки;
	КонецЕсли;
 
КонецПроцедуры // РасширитьПолеОбъектаКластера()

// Функция - возвращает описание объекта 1С, сохраненное в кэше описаний
//
// Параметры:
//   ИдОбъекта     - Строка    - идентификатор объекта кластера 1С
//   ТипОбъекта    - Строка    - тип объектов кластера к получению
//
// Возвращаемое значение:
//   Соответствие    - описание объекта кластера 1С
//
Функция ПолучитьОписаниеОбъектаИзКэша(ИдОбъекта, ТипОбъекта)

	КэшОбъектов = КэшОписанийОбъектовКластера(ТипОбъекта);

	ОписаниеОбъекта = Неопределено;
	Если ТипЗнч(КэшОбъектов) = Тип("Соответствие") Тогда
		ОписаниеОбъекта = КэшОбъектов[ИдОбъекта];
	КонецЕсли;
	Если ОписаниеОбъекта = Неопределено И НЕ ОбщегоНазначения.ЭтоПустойGUID(ИдОбъекта) Тогда
		ОбновитьКэшОписанийОбъектовКластеров(ТипОбъекта);
		ОписаниеОбъекта = КэшОбъектов[ИдОбъекта];
	КонецЕсли;

	Возврат ОписаниеОбъекта;

КонецФункции // ПолучитьОписаниеОбъектаИзКэша()

// Процедура - дополняет описание объекта кластера дополнительными служебными полями
//
// Параметры:
//   ПолноеОписаниеОбъекта    - Соответствие             - описание объекта кластера 1С
//   ТипОбъекта               - Строка                   - тип объектов кластера к получению
//   Агент                    - УправлениеКластером1С    - объект управления кластером 1С
//   Кластер                  - Кластер                  - объект-кластер 1С
//
Процедура ДополнитьОписаниеОбъектаКластера(ПолноеОписаниеОбъекта, ТипОбъекта, Агент, Кластер)

	МеткаАгента = СтрШаблон("%1:%2", Агент.АдресСервераАдминистрирования(), Агент.ПортСервераАдминистрирования());

	ПолноеОписаниеОбъекта.Вставить("agent", МеткаАгента);
	ПолноеОписаниеОбъекта.Вставить("_clusterObject", Кластер);
	ПолноеОписаниеОбъекта.Вставить("_type", ТипОбъекта);

	Если НЕ ТипОбъекта = ТипыОбъектовКластера1С.Кластеры Тогда
		ПолноеОписаниеОбъекта.Вставить("cluster"      , Кластер.Ид());
		ПолноеОписаниеОбъекта.Вставить("cluster-host" , Кластер.АдресСервера());
		ПолноеОписаниеОбъекта.Вставить("cluster-port" , Кластер.ПортСервера());
		ПолноеОписаниеОбъекта.Вставить("cluster-label",
		                               СтрШаблон("%1:%2", Кластер.АдресСервера(), Кластер.ПортСервера()));
	КонецЕсли;

	Если ТипОбъекта = ТипыОбъектовКластера1С.ИнформационныеБазы Тогда
		ДополнитьОписаниеИнформационнойБазыДаннымиСУБД(ПолноеОписаниеОбъекта);
	КонецЕсли;

	ПолноеОписаниеОбъекта.Вставить("id", ПолноеОписаниеОбъекта[ТипОбъекта]);

	ДобавитьМеткуОбъектаКластера(ПолноеОписаниеОбъекта);

	ПолноеОписаниеОбъекта.Вставить("count", 1);

КонецПроцедуры // ДополнитьОписаниеОбъектаКластера()

// Процедура - дополняет описание информационной базы 1С данными о параметрах СУБД
//
// Параметры:
//   ОписаниеИБ    - Соответствие    - описание информационной базы 1С
//
Процедура ДополнитьОписаниеИнформационнойБазыПоПараметрамСУБД(ОписаниеИБ)

	ПараметрыСУБД = Настройки.ПараметрыСУБДИБ(ОписаниеИБ["_thisObject"]);

	Если НЕ ЗначениеЗаполнено(ПараметрыСУБД) Тогда
		ТекстОшибки = СтрШаблон("Для информационной базы ""%1"", не обнаружены параметры подключения",
		                        ОписаниеИБ["name"]);
		ОписаниеИБ.Вставить("db-error", ТекстОшибки);
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОписаниеИБ["dbms"]) Тогда
		Если ПараметрыСУБД.Свойство("СУБД_Тип") Тогда
			ОписаниеИБ.Вставить("dbms", ПараметрыСУБД.СУБД_Тип);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОписаниеИБ["db-server"]) Тогда
		Если ПараметрыСУБД.Свойство("СУБД_Сервер") Тогда
			ОписаниеИБ.Вставить("db-server", ПараметрыСУБД.СУБД_Сервер);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОписаниеИБ["db-name"]) Тогда
		Если ПараметрыСУБД.Свойство("СУБД_База") Тогда
			ОписаниеИБ.Вставить("db-name", ПараметрыСУБД.СУБД_База);
		Иначе
			ОписаниеИБ.Вставить("db-name", ОписаниеИБ["name"]);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДополнитьОписаниеИнформационнойБазыПоПараметрамСУБД()

// Процедура - дополняет описание информационной базы 1С данными о соответствующей базе данных
//
// Параметры:
//   ОписаниеИБ    - Соответствие    - описание информационной базы 1С
//
Процедура ДополнитьОписаниеИнформационнойБазыДаннымиСУБД(ОписаниеИБ)

	ДополнитьОписаниеИнформационнойБазыПоПараметрамСУБД(ОписаниеИБ);

	Если НЕ БазаДанныхСуществуетВСУБД(ОписаниеИБ) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСУБД = Настройки.ПараметрыСУБДИБ(ОписаниеИБ["_thisObject"]);

	ПодключениеКСУБД = Новый ПодключениеMSSQL(ОписаниеИБ["db-server"],
	                                          ПараметрыСУБД.СУБД_Пользователь,
	                                          ПараметрыСУБД.СУБД_Пароль);

	СтруктураХраненияИБ = Новый СтруктураХраненияИБ(ПодключениеКСУБД, ОписаниеИБ["db-name"]);

	ЗанимаемоеМесто = СтруктураХраненияИБ.ЗанимаемоеМесто();

	ОписаниеИБ.Вставить("db-size-on-disk"     , ЗанимаемоеМесто.РазмерБазы);
	ОписаниеИБ.Вставить("db-unallocated-space", ЗанимаемоеМесто.Свободно);
	ОписаниеИБ.Вставить("db-reserved-space"   , ЗанимаемоеМесто.Зарезервировано);
	ОписаниеИБ.Вставить("db-data-size"        , ЗанимаемоеМесто.Данные);
	ОписаниеИБ.Вставить("db-index-size"       , ЗанимаемоеМесто.Индексы);
	ОписаниеИБ.Вставить("db-unused-space"     , ЗанимаемоеМесто.НеИспользуется);
	ОписаниеИБ.Вставить("db-table-count"      , ЗанимаемоеМесто.КоличествоТаблиц);

КонецПроцедуры // ДополнитьОписаниеИнформационнойБазыДаннымиСУБД()

// Процедура - заполняет описания таблиц базы данных для указанной информационной базы
//
// Параметры:
//   ОписаниеИБ    - Соответствие    - описание информационной базы 1С
//
Процедура ЗаполнитьОписанияТаблицБазыДанныхИБ(ОписаниеИБ)

	ДополнитьОписаниеИнформационнойБазыПоПараметрамСУБД(ОписаниеИБ);

	Если НЕ БазаДанныхСуществуетВСУБД(ОписаниеИБ) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСУБД = Настройки.ПараметрыСУБДИБ(ОписаниеИБ["_thisObject"]);

	ПодключениеКСУБД = Новый ПодключениеMSSQL(ОписаниеИБ["db-server"],
	                                          ПараметрыСУБД.СУБД_Пользователь,
	                                          ПараметрыСУБД.СУБД_Пароль);

	СтруктураХраненияИБ = Новый СтруктураХраненияИБ(ПодключениеКСУБД, ОписаниеИБ["db-name"]);

	Если НЕ ТипЗнч(ОписанияТаблицСУБД) = Тип("Соответствие") Тогда
		ОписанияТаблицСУБД = Новый Соответствие();
	КонецЕсли;

	ТаблицыСУБД = СтруктураХраненияИБ.ПоказателиИспользованияТаблицБазы();

	СтруктураХраненияТаблицИБ = СтруктураХраненияТаблицИБ(ОписаниеИБ);

	Для Каждого ТекТаблица Из ТаблицыСУБД Цикл

		ИмяТаблицы = ТекТаблица.Таблица;
		Если Лев(ИмяТаблицы, 1) = "_" Тогда
			ИмяТаблицы = Сред(ИмяТаблицы, 2);
		КонецЕсли;

		ОписаниеТаблицыСУБД =  ОписаниеТаблицыСУБД(ОписаниеИБ, ТекТаблица,  СтруктураХраненияТаблицИБ[ИмяТаблицы]);

		ОписанияТаблицСУБД.Вставить(СтрШаблон("%1_%2", ОписаниеИБ["infobase"], ТекТаблица.Таблица),
		                            ОписаниеТаблицыСУБД);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьОписанияТаблицБазыДанныхИБ()

// Процедура - добавляем текстовый идентификатор объекта кластера (label)
//
// Параметры:
//   ПолноеОписаниеОбъекта    - Соответствие    - описание объекта кластера 1С
//
Процедура ДобавитьМеткуОбъектаКластера(ПолноеОписаниеОбъекта)

	Метка = "";

	Если ПолноеОписаниеОбъекта["_type"] = ТипыОбъектовКластера1С.Кластеры
	 ИЛИ ПолноеОписаниеОбъекта["_type"] = ТипыОбъектовКластера1С.РабочиеПроцессы Тогда
		Метка = СтрШаблон("%1:%2",
		                  ПолноеОписаниеОбъекта["host"],
		                  ПолноеОписаниеОбъекта["port"]);
	ИначеЕсли ПолноеОписаниеОбъекта["_type"] = ТипыОбъектовКластера1С.Серверы Тогда
		Метка = СтрШаблон("%1:%2",
		                  ПолноеОписаниеОбъекта["agent-host"],
		                  ПолноеОписаниеОбъекта["agent-port"]);
	ИначеЕсли ПолноеОписаниеОбъекта["_type"] = ТипыОбъектовКластера1С.ИнформационныеБазы Тогда
		Метка = ПолноеОписаниеОбъекта["name"];
	ИначеЕсли ПолноеОписаниеОбъекта["_type"] = ТипыОбъектовКластера1С.Сеансы Тогда
		Метка = СтрШаблон("%1:%2",
		                  ПолноеОписаниеОбъекта["infobase-label"],
		                  ПолноеОписаниеОбъекта["session-id"]);
	ИначеЕсли ПолноеОписаниеОбъекта["_type"] = ТипыОбъектовКластера1С.Соединения Тогда
		ИдСоединения = ПолноеОписаниеОбъекта["conn-id"];
		Если ИдСоединения = 0 Тогда
			ИдСоединения = ПолноеОписаниеОбъекта["application"];
		КонецЕсли;
		Метка = СтрШаблон("%1:%2",
		                  ПолноеОписаниеОбъекта["process-label"],
		                  ИдСоединения);
	КонецЕсли;
		
	ПолноеОписаниеОбъекта.Вставить("label", Метка);

КонецПроцедуры // ДобавитьМеткуОбъектаКластера()

// Процедура - заполняет расширенное описание объекта и добавляет в список обновленных описаний
//
// Параметры:
//   ТипОбъекта               - Строка              - тип объектов кластера к получению
//   ПолноеОписаниеОбъекта    - Соответствие        - описание объекта кластера 1С
//   Поля                     - Строка              - список получаемых полей, разделенный ","
//                              Массив из Строка      или массив имен полей
//                                                    спец. значения: "_all" - все поля,
//                                                    "_summary" - основные поля для ИБ и соединений
//   ОбновленныеОписания      - Соответствие        - (возвр.) список обновленных описаний
//
Процедура ЗаполнитьРасширенноеОписаниеОбъекта(ТипОбъекта,
	                                          ПолноеОписаниеОбъекта,
	                                          Поля = "_all",
	                                          ОбновленныеОписания = Неопределено)

	Если НЕ ПолучатьРасширенноеОписаниеОбъекта(ТипОбъекта, Поля) Тогда
		Возврат;
	КонецЕсли;

	Кластер        = ПолноеОписаниеОбъекта["_clusterObject"];
	ОбъектКластера = ПолноеОписаниеОбъекта["_thisObject"];

	ИдИБ = ПолноеОписаниеОбъекта["infobase"];
	
	Если ОбщегоНазначения.ЭтоПустойGUID(ИдИБ) Тогда
		Возврат;
	КонецЕсли;

	ИБОбъекта = Кластер.ИнформационныеБазы().Получить(ИдИБ, -1);
	
	Если ИБОбъекта.ОшибкаАвторизации() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбъектКластера.ПолноеОписание() Тогда
		ОбъектКластера.ОбновитьДанные(1);
	КонецЕсли;

	Если НЕ ТипЗнч(ОбновленныеОписания) = Тип("Соответствие") Тогда
		ОбновленныеОписания = Новый Соответствие();
	КонецЕсли;

	Если ОбъектКластера.ПолноеОписание() Тогда

		ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипОбъекта);

		ОбновленноеОписаниеОбъекта = Новый Соответствие();
		Для Каждого ТекСвойство Из ПолноеОписаниеОбъекта Цикл
			ОбновленноеОписаниеОбъекта.Вставить(ТекСвойство.Ключ, ТекСвойство.Значение);
		КонецЦикла;
		
		Для й = 0 По ПоляОбъекта.ВГраница() Цикл
			Если ПоляОбъекта[й].Основное Тогда
				Продолжить;
			КонецЕсли;
			ОбновленноеОписаниеОбъекта.Вставить(ПоляОбъекта[й].ИмяРАК,
			                                    ОбъектКластера.Получить(ПоляОбъекта[й].Имя, -1));
		КонецЦикла;
		
		ОбновленныеОписания.Вставить(ОбъектКластера.Ид(), ОбновленноеОписаниеОбъекта);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРасширенноеОписаниеОбъекта()

// Процедура - обновляет кэш описаний объектов указанного типа
//
// Параметры:
//   ТипОбъекта    - Строка    - тип объектов кластера к получению
//   Обновить      - Булево    - флаг принудительного обновления сведений об объектах от сервиса RAS
//
Процедура ОбновитьКэшОписанийОбъектовКластеров(Знач ТипОбъекта, Знач Обновить = Ложь)

	Если НЕ НужноОбновитьОписанияОбъектовКластера(ТипОбъекта, Обновить) Тогда
		Возврат;
	КонецЕсли;

	ОписанияОбъектовКластеров = КэшОписанийОбъектовКластера(ТипОбъекта, Истина);
	Если ТипЗнч(ОписанияОбъектовКластеров) = Тип("Соответствие") Тогда
		ОписанияОбъектовКластеров.Очистить();
	КонецЕсли;

	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Таблицы) Тогда
		Если НЕ ЗначениеЗаполнено(ОписанияИнформационныхБаз) Тогда
			ОбновитьКэшОписанийОбъектовКластеров(ТипыОбъектовКластера1С.ИнформационныеБазы);
		КонецЕсли;
		Для Каждого ТекОписаниеИБ Из ОписанияИнформационныхБаз Цикл
			ЗаполнитьОписанияТаблицБазыДанныхИБ(ТекОписаниеИБ.Значение);
		КонецЦикла;
		Возврат;
	КонецЕсли;

	Для Каждого ТекАгент Из Агенты Цикл

		Если НЕ ИспользоватьАгент(ТекАгент.Значение) Тогда
			Продолжить;
		КонецЕсли;

		ОписанияОбъектовАгента = ПолныеОписанияОбъектовАгента(ТекАгент.Значение, ТипОбъекта);
		
		Для Каждого ТекОписаниеОбъекта Из ОписанияОбъектовАгента Цикл
			Если ТипОбъекта = ТипыОбъектовКластера1С.ИнформационныеБазы Тогда
				ПараметрыСУБД = Настройки.ПараметрыСУБДИБ(ТекОписаниеОбъекта.Значение["_thisObject"], Истина);
				Если ПараметрыСУБД = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ОписанияОбъектовКластеров[ТекОписаниеОбъекта.Значение[ТипОбъекта]] = Неопределено Тогда
				ОписанияОбъектовКластеров.Вставить(ТекОписаниеОбъекта.Значение[ТипОбъекта], ТекОписаниеОбъекта.Значение);
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьКэшОписанийОбъектовКластеров()

// Функция - заполняет описание объекта с учетом ограничения добавляемых полей
// из полного описания объекта
//
// Параметры:
//   ТипОбъекта               - Строка              - тип объектов кластера к получению
//   ПолноеОписаниеОбъекта    - Соответствие        - описание объекта кластера 1С
//   Поля                     - Строка              - список заполняемых полей, разделенный ","
//                              Массив из Строка      или массив имен полей
//                                                    спец. значения: "_all" - все поля,
//                                                    "_summary" - основные поля для ИБ и соединений
//
// Возвращаемое значение:
//   Соответствие    - описание объекта кластера 1С с требуемым составом полей
//
Функция ОписаниеОбъектаКластера(ТипОбъекта,
	                            ПолноеОписаниеОбъекта,
	                            Знач Поля = "_all")

	Поля = ОбщегоНазначения.СписокПолей(Поля);

	ОписаниеОбъекта = Новый Соответствие();

	Для Каждого ТекПолеОписанияОбъекта Из ПолноеОписаниеОбъекта Цикл

		ИмяПоля = ТекПолеОписанияОбъекта.Ключ;
		ЗначениеПоля = ТекПолеОписанияОбъекта.Значение;

		Если НЕ НужноДобавлятьПоле(ТипОбъекта, Поля, ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеОбъекта.Вставить(ИмяПоля, ЗначениеПоля);

	КонецЦикла;

	Возврат ОписаниеОбъекта;

КонецФункции // ОписаниеОбъектаКластера()

// Функция - получает кэш описаний объектов кластера указанного типа
//
// Параметры:
//   ТипОбъекта    - Строка    - тип объектов кластера к получению
//   Очистить      - Булево    - Истина - будет возвращен пустой кэш
//
// Возвращаемое значение:
//   Соответствие    - кэш описаний объектов кластера
//
Функция КэшОписанийОбъектовКластера(Знач ТипОбъекта, Знач Очистить = Ложь)

	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Кластеры) Тогда
		Если НЕ ТипЗнч(ОписанияКластеров) = Тип("Соответствие") Тогда
			ОписанияКластеров = Новый Соответствие();
		КонецЕсли;
		КэшОписанийОбъектов = ОписанияКластеров;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Серверы) Тогда
		Если НЕ ТипЗнч(ОписанияСерверов) = Тип("Соответствие") Тогда
			ОписанияСерверов = Новый Соответствие();
		КонецЕсли;
		КэшОписанийОбъектов = ОписанияСерверов;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.РабочиеПроцессы) Тогда
		Если НЕ ТипЗнч(ОписанияРабочихПроцессов) = Тип("Соответствие") Тогда
			ОписанияРабочихПроцессов = Новый Соответствие();
		КонецЕсли;
		КэшОписанийОбъектов = ОписанияРабочихПроцессов;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.ИнформационныеБазы) Тогда
		Если НЕ ТипЗнч(ОписанияИнформационныхБаз) = Тип("Соответствие") Тогда
			ОписанияИнформационныхБаз = Новый Соответствие();
		КонецЕсли;
		КэшОписанийОбъектов = ОписанияИнформационныхБаз;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Сеансы) Тогда
		Если НЕ ТипЗнч(ОписанияСеансов) = Тип("Соответствие") Тогда
			ОписанияСеансов = Новый Соответствие();
		КонецЕсли;
		КэшОписанийОбъектов = ОписанияСеансов;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Соединения) Тогда
		Если НЕ ТипЗнч(ОписанияСоединений) = Тип("Соответствие") Тогда
			ОписанияСоединений = Новый Соответствие();
		КонецЕсли;
		КэшОписанийОбъектов = ОписанияСоединений;
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Таблицы) Тогда
		Если НЕ ТипЗнч(ОписанияТаблицСУБД) = Тип("Соответствие") Тогда
			ОписанияТаблицСУБД = Новый Соответствие();
		КонецЕсли;
		КэшОписанийОбъектов = ОписанияТаблицСУБД;
	Иначе
		КэшОписанийОбъектов = Новый Соответствие();
	КонецЕсли;

	Если Очистить Тогда
		КэшОписанийОбъектов.Очистить();
	КонецЕсли;

	Возврат КэшОписанийОбъектов;

КонецФункции // КэшОписанийОбъектовКластера()

#КонецОбласти // ПолучениеДанныхСервисаАдминистрирования

#Область СлужебныеПроцедурыИФункции

// Функция - получает агента управления кластером 1С
//
// Параметры:
//   Имя                    - Строка                   - имя агента
//   Резервирует            - Строка                   - имя резервируемого агента
//   УправлениеКластером    - УправлениеКластером1С    - объект управления кластером 1С
//
// Возвращаемое значение:
//   Структура                                  - список описаний кластеров
//     *Имя            - Строка                   - имя агента
//     *Резервирует    - Строка                   - имя резервируемого агента
//     *Агент          - УправлениеКластером1С    - объект управления кластерами 1С
//     *Кластеры       - Массив из Кластер        - кластеры агента
//
Функция ОписаниеАгента(Имя, Резервирует, УправлениеКластером)

	ОписаниеАгента = Новый Структура();
	ОписаниеАгента.Вставить("Имя"        , Имя);
	ОписаниеАгента.Вставить("Резервирует", ВРег(Резервирует));
	ОписаниеАгента.Вставить("Агент"      , УправлениеКластером);
	ОписаниеАгента.Вставить("Кластеры"   , Новый Массив());

	Возврат ОписаниеАгента;

КонецФункции // ОписаниеАгента()

// Функция - получает описание таблицы базы данных для указанной информационной базы
// по данным полученным от СУБД
//
// Параметры:
//   ОписаниеИБ                 - Соответствие    - описание информационной базы 1С
//   ОписаниеТаблицы            - Структура       - описание таблицы базы данных, полученное от СУБД
//   ОписаниеХраненияТаблицы    - Соответствие    - описание структуры хранения таблицы в СУБД
//                                                  (соответствие имени таблицы базы имени и типу объекта 1С)
//
// Возвращаемое значение:
//   Соответствие    - описание таблицы базы данных
//
Функция ОписаниеТаблицыСУБД(ОписаниеИБ, ОписаниеТаблицы, ОписаниеХраненияТаблицы)

	Если ОписаниеХраненияТаблицы = Неопределено Тогда
		ИмяТаблицы1С = Неопределено;
		ОсновнаяТаблица1С = Неопределено;
		НазначениеТаблицы1С = Неопределено;
	Иначе
		ИмяТаблицы1С = ОписаниеХраненияТаблицы["ПолноеИмяМетаданных"];
		НазначениеТаблицы1С = ОписаниеХраненияТаблицы["Назначение"];
		ОсновнаяТаблица1С = ОписаниеХраненияТаблицы["ПолноеИмяМетаданных"];
		ЧастиИмени = СтрРазделить(ОсновнаяТаблица1С, ".", Ложь);
		Если ЧастиИмени.Количество() > 1 Тогда
			ОсновнаяТаблица1С = СтрШаблон("%1.%2", ЧастиИмени[0], ЧастиИмени[1]);
		КонецЕсли;
	КонецЕсли;

	ОписаниеТаблицыСУБД = Новый Соответствие();
	ОписаниеТаблицыСУБД.Вставить("cluster"        , ОписаниеИБ["cluster"]);
	ОписаниеТаблицыСУБД.Вставить("cluster-label"  , ОписаниеИБ["cluster-label"]);
	ОписаниеТаблицыСУБД.Вставить("infobase"       , ОписаниеИБ["infobase"]);
	ОписаниеТаблицыСУБД.Вставить("infobase-label" , ОписаниеИБ["name"]);
	ОписаниеТаблицыСУБД.Вставить("name"           , ИмяТаблицы1С);
	ОписаниеТаблицыСУБД.Вставить("main-object"    , ОсновнаяТаблица1С);
	ОписаниеТаблицыСУБД.Вставить("purpose"        , НазначениеТаблицы1С);
	ОписаниеТаблицыСУБД.Вставить("db-name"        , ОписаниеТаблицы.Таблица);
	ОписаниеТаблицыСУБД.Вставить("db-row-count"   , ОписаниеТаблицы.КоличествоСтрок);
	ОписаниеТаблицыСУБД.Вставить("db-size"        , ОписаниеТаблицы.ВсегоЗанято);
	ОписаниеТаблицыСУБД.Вставить("db-used-space"  , ОписаниеТаблицы.Используется);
	ОписаниеТаблицыСУБД.Вставить("db-unused-space", ОписаниеТаблицы.НеИспользуется);
	ОписаниеТаблицыСУБД.Вставить("db-read-count"  , ОписаниеТаблицы.ОперацийЧтения);
	ОписаниеТаблицыСУБД.Вставить("db-seek-count"  , ОписаниеТаблицы.ОперацийВыборки);
	ОписаниеТаблицыСУБД.Вставить("db-scan-count"  , ОписаниеТаблицы.ОперацийСканирования);
	ОписаниеТаблицыСУБД.Вставить("db-lookup-count", ОписаниеТаблицы.ОперацийПоиска);
	ОписаниеТаблицыСУБД.Вставить("db-write-count" , ОписаниеТаблицы.ОперацийЗаписи);
	ОписаниеТаблицыСУБД.Вставить("count"          , 1);

	Возврат ОписаниеТаблицыСУБД;

КонецФункции // ОписаниеТаблицыСУБД()

// Функция - определяет доступность агента кластера
//
// Параметры:
//   ОписаниеАгента   - Структура               - описание агента управления кластером 1С
//     *Имя             - Строка                  - имя агента управления кластером 1С
//     *Резервирует     - Строка                  - имя резервируемого агента управления кластером 1С
//     *Агент           - УправлениеКластером1С   - объект управления кластером 1С
//     *Кластеры        - Массив                  - список кластеров агента
//
// Возвращаемое значение:
//   Булево    - Истина - агент управления кластером доступен
//
Функция АгентДоступен(ОписаниеАгента)

	КластерыАгента = ПолучитьКластерыАгента(ОписаниеАгента);

	Если КластерыАгента = Неопределено Тогда
		КоличествоКластеров = 0;
	Иначе
		Попытка
			КоличествоКластеров = КластерыАгента.Количество();
		Исключение
			КоличествоКластеров = 0;
		КонецПопытки;
	КонецЕсли;

	Если КоличествоКластеров = 0 Тогда
		ТекстОшибки = СтрШаблон("При проверке доступности агента
		                        |не удалось получить список кластеров у сервиса администрирования ""%1""",
		                        ОписаниеАгента.Агент.СтрокаПодключения());
		Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции // АгентДоступен()

// Функция - определяет возможность использования агента кластера для работы
//
// Параметры:
//   ОписаниеАгента         - Структура               - описание агента управления кластером 1С
//     *Имя                   - Строка                  - имя агента управления кластером 1С
//     *Резервирует           - Строка                  - имя резервируемого агента управления кластером 1С
//     *Агент                 - УправлениеКластером1С   - объект управления кластером 1С
//     *Кластеры              - Массив                  - список кластеров агента
//   ПроверятьДоступность   - Булево                  - флаг необходимости проверки доступности агента
//
// Возвращаемое значение:
//   Булево    - Истина - агент может использоваться для работы
//
Функция ИспользоватьАгент(ОписаниеАгента, ПроверятьДоступность = Истина)

	// Если агент не доступен, то он не может использоваться
	Если ПроверятьДоступность И НЕ АгентДоступен(ОписаниеАгента) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Если резервируемый агент не указан, то это основной агент и используется всегда
	Если НЕ ЗначениеЗаполнено(ОписаниеАгента.Резервирует) Тогда
		Возврат Истина;
	КонецЕсли;

	// Если резервируемый агент не обнаружен, то используем текущий
	Если НЕ (ТипЗнч(Агенты[ОписаниеАгента.Резервирует]) = Тип("Структура")
	   И Агенты[ОписаниеАгента.Резервирует].Свойство("Агент")) Тогда
		Возврат Истина;
	КонецЕсли;

	// Если не удалось получить кластеры резервируемого агента
	// или других резервных агентов того же кластера, то используем текущий
	Для Каждого ТекАгент Из Агенты Цикл
		
		Если ОписаниеАгента.Имя = ТекАгент.Значение.Имя Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекАгент.Значение.Имя = ОписаниеАгента.Резервирует
		 ИЛИ ТекАгент.Значение.Резервирует = ОписаниеАгента.Резервирует Тогда
			Если АгентДоступен(ТекАгент.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции // ИспользоватьАгент()

// Процедура - получает список кластеров агента и устанавливает параметры из настроек
//
// Параметры:
//   ОписаниеАгента   - Структура               - описание агента управления кластером 1С
//       *Имя             - Строка                 - имя агента управления кластером 1С
//       *Резервирует     - Строка                 - имя резервируемого агента управления кластером 1С
//       *Агент           - УправлениеКластером1С  - объект управления кластером 1С
//       *Кластеры        - Массив                 - список кластеров агента
//
Процедура ИнициализироватьКластерыАгента(ОписаниеАгента)
	
	Если НЕ ИспользоватьАгент(ОписаниеАгента, Ложь) Тогда
		Возврат;
	КонецЕсли;

	КластерыАгента = ПолучитьКластерыАгента(ОписаниеАгента);

	Если КластерыАгента = Неопределено Тогда
		ТекстОшибки = СтрШаблон("При инициализации кластеров
		                        |не удалось получить список кластеров у сервиса администрирования ""%1"".",
		                        ОписаниеАгента.Агент.СтрокаПодключения());
		Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;

	Для Каждого ТекКластер Из КластерыАгента Цикл
		Настройки.УстановитьПараметрыКластера(ТекКластер);
	КонецЦикла;

КонецПроцедуры // ИнициализироватьКластерыАгента()

// Функция - получает список кластеров агента
//
// Параметры:
//   ОписаниеАгента   - Структура               - описание агента управления кластером 1С
//     *Имя             - Строка                  - имя агента управления кластером 1С
//     *Резервирует     - Строка                  - имя резервируемого агента управления кластером 1С
//     *Агент           - УправлениеКластером1С   - объект управления кластером 1С
//     *Кластеры        - Массив                  - список кластеров агента
//
// Возвращаемое значение:
//   Массив    - список кластеров 1С
//
Функция ПолучитьКластерыАгента(ОписаниеАгента)
	
	КластерыАгента = Неопределено;

	// TODO: Обход проблемы отсутствия вывода команды rac cluster list
	КоличествоПопыток = Настройки.МаксПопытокИнициализацииКластера();
	ПопыткаПолучения = 1;
	ИнтервалПовторнойИнициализации = Настройки.ИнтервалПовторнойИнициализации();

	Пока КластерыАгента = Неопределено И ПопыткаПолучения <= КоличествоПопыток Цикл
		ТекстОшибки = "";
		Попытка
			КластерыАгента = ОписаниеАгента.Агент.Кластеры().Список();
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КластерыАгента = Неопределено;
		КонецПопытки;
		Если КластерыАгента = Неопределено И ПопыткаПолучения < КоличествоПопыток Тогда
			ТекстСообщения = СтрШаблон("Неудачная попытка (%1) получить список кластеров
			                           |у сервиса администрирования ""%2"", ожидаем %3:%4%5",
			                           ПопыткаПолучения,
			                           ОписаниеАгента.Агент.СтрокаПодключения(),
			                           ИнтервалПовторнойИнициализации * ПопыткаПолучения,
			                           Символы.ПС,
			                           ТекстОшибки);
			Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
			Приостановить(ИнтервалПовторнойИнициализации * ПопыткаПолучения);
		Иначе
			Прервать;
		КонецЕсли;
		ПопыткаПолучения = ПопыткаПолучения + 1;
	КонецЦикла;

	Если Настройки.ТолькоВыбранныеКластеры() Тогда
		Для Каждого ТекКластер Из КластерыАгента Цикл
			МеткаКластера = СтрШаблон("%1:%2",
			                          ТекКластер.АдресСервера(),
			                          ТекКластер.ПортСервера());
			Если НЕ Настройки.ПараметрыПодключения().Кластеры[ВРег(МеткаКластера)] = Неопределено Тогда
				ОписаниеАгента.Кластеры.Добавить(ТекКластер);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОписаниеАгента.Кластеры = КластерыАгента;
	КонецЕсли;

	Возврат ОписаниеАгента.Кластеры;

КонецФункции // ПолучитьКластерыАгента()

// Функция - возвращает необходимость обновления описания объектов кластера
//
// Параметры:
//   ТипОбъекта               - Строка    - тип объектов кластера
//   ОбновитьПринудительно    - Булево    - Истина - обновление будет выполнено в любом случае;
//                                          Ложь - обновление будет выполнено по таймеру
//
// Возвращаемое значение:
//   Булево    - Истина - требуется обновить описание объектов кластера
//
Функция НужноОбновитьОписанияОбъектовКластера(Знач ТипОбъекта, Знач ОбновитьПринудительно = Ложь)

	Если ОбновитьПринудительно Тогда
		Возврат Истина;
	КонецЕсли;

	Результат = Ложь;
	
	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Кластеры) Тогда
		Результат = НЕ ЗначениеЗаполнено(ОписанияКластеров);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Серверы) Тогда
		Результат = НЕ ЗначениеЗаполнено(ОписанияСерверов);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.РабочиеПроцессы) Тогда
		Результат = НЕ ЗначениеЗаполнено(ОписанияРабочихПроцессов);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.ИнформационныеБазы) Тогда
		Результат = НЕ ЗначениеЗаполнено(ОписанияИнформационныхБаз);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Сеансы) Тогда
		Результат = НЕ ЗначениеЗаполнено(ОписанияСеансов);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Соединения) Тогда
		Результат = НЕ ЗначениеЗаполнено(ОписанияСоединений);
	ИначеЕсли ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Таблицы) Тогда
		Результат = НЕ ЗначениеЗаполнено(ОписанияТаблицСУБД);
	Иначе
		Результат = Ложь;
	КонецЕсли;

	Если Результат Тогда
		Возврат Результат;
	КонецЕсли;

	Если ВРег(ТипОбъекта) = ВРег(ТипыОбъектовКластера1С.Таблицы) Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого ТекАгент Из Агенты Цикл

		Если НЕ ИспользоватьАгент(ТекАгент.Значение) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипОбъекта = ТипыОбъектовКластера1С.Кластеры Тогда
			Если ТекАгент.Значение.Агент.Кластеры().ТребуетсяОбновление(0) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Для Каждого ТекКластер Из ТекАгент.Значение.Кластеры Цикл
				Если ТекКластер.Получить(ТипОбъекта).ТребуетсяОбновление(0) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции // НужноОбновитьОписанияОбъектовКластера()

// Функция - определяет, что поле является полем основного (сокращенного) описания объекта кластера
//
// Параметры:
//   ТипОбъекта    - Строка    - тип объектов кластера к получению
//   ИмяПоля       - Строка    - имя проверяемого поля
//
// Возвращаемое значение:
//   Булево    - Истина - поле является полем основного (сокращенного) описания объекта кластера
//
Функция ЭтоПолеОсновногоОписанияОбъекта(ТипОбъекта, ИмяПоля)

	ПоляОсновнойИнформации = Новый Соответствие();

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ТипОбъекта, Истина);

	Для Каждого ТекПоле Из ПоляОбъекта Цикл
		ПоляОсновнойИнформации.Вставить(ВРег(ТекПоле.ИмяРАК), Истина);
		Если ВРег(ТекПоле.ИмяРАК) = "PROCESS" Тогда
			ПоляОсновнойИнформации.Вставить("PROCESS-LABEL", Истина);
			ПоляОсновнойИнформации.Вставить("PROCESS-HOST" , Истина);
		ИначеЕсли ВРег(ТекПоле.ИмяРАК) = "INFOBASE" Тогда
			ПоляОсновнойИнформации.Вставить("INFOBASE-LABEL", Истина);
		КонецЕсли;
	КонецЦикла;
	ПоляОсновнойИнформации.Вставить("ID"           , Истина);
	ПоляОсновнойИнформации.Вставить("LABEL"        , Истина);
	ПоляОсновнойИнформации.Вставить("AGENT"        , Истина);
	ПоляОсновнойИнформации.Вставить("CLUSTER"      , Истина);
	ПоляОсновнойИнформации.Вставить("CLUSTER-LABEL", Истина);
	ПоляОсновнойИнформации.Вставить("CLUSTER-HOST" , Истина);
	ПоляОсновнойИнформации.Вставить("CLUSTER-PORT" , Истина);
	ПоляОсновнойИнформации.Вставить("_NO"          , Истина);
	ПоляОсновнойИнформации.Вставить("_SUMMARY"     , Истина);
	ПоляОсновнойИнформации.Вставить("COUNT"        , Истина);
	ПоляОсновнойИнформации.Вставить("DURATION"     , Истина);

	Если ТипОбъекта = ТипыОбъектовКластера1С.ИнформационныеБазы Тогда
		ПоляОсновнойИнформации.Вставить("DB-ERROR"            , Истина);
		ПоляОсновнойИнформации.Вставить("DB-SIZE-ON-DISK"     , Истина);
		ПоляОсновнойИнформации.Вставить("DB-UNALLOCATED-SPACE", Истина);
		ПоляОсновнойИнформации.Вставить("DB-RESERVED-SPACE"   , Истина);
		ПоляОсновнойИнформации.Вставить("DB-DATA-SIZE"        , Истина);
		ПоляОсновнойИнформации.Вставить("DB-INDEX-SIZE"       , Истина);
		ПоляОсновнойИнформации.Вставить("DB-UNUSED-SPACE"     , Истина);
		ПоляОсновнойИнформации.Вставить("DB-TABLE-COUNT"      , Истина);
	КонецЕсли;

	Если ПоляОсновнойИнформации[ВРег(ИмяПоля)] = Истина Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции // ЭтоПолеОсновногоОписанияОбъекта()

// Функция - определяет необходимость получения расширенного описания объекта кластера
//
// Параметры:
//   ТипОбъекта    - Строка               - тип объектов кластера к получению
//   Поля          - Строка               - список получаемых полей, разделенный ","
//                   Массив из Строка       или массив имен полей
//
// Возвращаемое значение:
//   Булево    - Истина - требуется получение расширенного описания объекта кластера
//
Функция ПолучатьРасширенноеОписаниеОбъекта(ТипОбъекта, Поля = "_all")

	Если НЕ (ТипОбъекта = ТипыОбъектовКластера1С.ИнформационныеБазы
	 ИЛИ ТипОбъекта = ТипыОбъектовКластера1С.Соединения) Тогда
		Возврат Ложь;
	КонецЕсли;

	ДобавляемыеПоля = ОбщегоНазначения.СписокПолей(Поля);

	Если НЕ ДобавляемыеПоля.Найти("_ALL") = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого ТекПоле Из ДобавляемыеПоля Цикл
		Если НЕ ЭтоПолеОсновногоОписанияОбъекта(ТипОбъекта, ТекПоле) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции // ПолучатьРасширенноеОписаниеОбъекта()

// Функция - проверяет необходимость добавления значения поля к описанию объекта
//
// Параметры:
//   ТипОбъекта         - Строка              - тип объектов кластера к получению
//   ДобавляемыеПоля    - Массив из Строка    - массив имен полей для проверки,
//                                              спец. значения: "_all" - все поля,
//                                              "_summary" - основные поля для ИБ и соединений
//   ИмяПоля            - Строка              - проверяемое поле
//
// Возвращаемое значение:
//   Булево    - Истина - поле нужно добавить к описанию объекта
//
Функция НужноДобавлятьПоле(ТипОбъекта, ДобавляемыеПоля, ИмяПоля)

	Если ВРег(ИмяПоля) = "_CLUSTEROBJECT"
	 ИЛИ ВРег(ИмяПоля) = "_THISOBJECT" Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ДобавляемыеПоля.Найти("_ALL") = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипОбъекта = ТипыОбъектовКластера1С.ИнформационныеБазы
	 ИЛИ ТипОбъекта = ТипыОбъектовКластера1С.Соединения Тогда
		Если НЕ ДобавляемыеПоля.Найти("_SUMMARY") = Неопределено И ЭтоПолеОсновногоОписанияОбъекта(ТипОбъекта, ИмяПоля) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ДобавляемыеПоля.Найти(ВРег(ИмяПоля)) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции // НужноДобавлятьПоле()

// Функция - проверяет существование базы данных на сервере СУБД
//
// Параметры:
//   ОписаниеИБ    - Соответствие    - описание информационной базы 1С
//
// Возвращаемое значение:
//   Булево    - Истина - база данных найдена на сервере СУБД
//
Функция БазаДанныхСуществуетВСУБД(ОписаниеИБ);

	БазаСуществует = Ложь;

	ТипСУБД = ОписаниеИБ["dbms"];
	Сервер  = ОписаниеИБ["db-server"];
	База    = ОписаниеИБ["db-name"];
	ИмяИБ   = ОписаниеИБ["name"];
	ПолеОшибки = "db-error";

	ПараметрыСУБД = Настройки.ПараметрыСУБДИБ(ОписаниеИБ["_thisObject"]);

	ПараметрыТаблицыСУБДЗаполнены = (ЗначениеЗаполнено(ТипСУБД)
	                               И ЗначениеЗаполнено(Сервер)
	                               И ЗначениеЗаполнено(База)
	                               И ЗначениеЗаполнено(ПараметрыСУБД.СУБД_Пользователь));
	Если НЕ ПараметрыТаблицыСУБДЗаполнены Тогда
		ТекстОшибки = СтрШаблон("Для информационной базы ""%1"",
		                        | указаны не все параметры подключения",
		                        ИмяИБ);
		ОписаниеИБ.Вставить(ПолеОшибки, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	ПодключениеКСУБД = Новый ПодключениеMSSQL(Сервер,
	                                          ПараметрыСУБД.СУБД_Пользователь,
	                                          ПараметрыСУБД.СУБД_Пароль);

	РаботаССУБД = Новый РаботаССУБД(ПодключениеКСУБД);
	Попытка
		БазаСуществует = РаботаССУБД.БазаСуществует(База);
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка проверки существования базы данных ""%1""
		                        | на сервере ""%2"" для информационной базы ""%3"":%4%5",
		                        База,
		                        Сервер,
		                        ИмяИБ,
		                        Символы.ПС,
		                        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОписаниеИБ.Вставить(ПолеОшибки, ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	Если НЕ БазаСуществует Тогда
		ТекстОшибки = СтрШаблон("Для информационной базы ""%1"", не обнаружена база данных ""%2""
		                        | на сервере ""%3""",
		                        ИмяИБ,
		                        База,
		                        Сервер);
		ОписаниеИБ.Вставить(ПолеОшибки, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат БазаСуществует;

КонецФункции // БазаДанныхСуществуетВСУБД()

// Функция - возвращает описание соответствия имен таблиц СУБД именам объектов ИБ 1С
//
// Параметры:
//   ОписаниеИБ    - Соответствие    - описание ИБ
//
// Возвращаемое значение:
//   Соответствие    - описание соответствия имен таблиц СУБД именам объектов ИБ 1С
//
Функция СтруктураХраненияТаблицИБ(Знач ОписаниеИБ)

	ИБ_Ид       = ОписаниеИБ["infobase"];
	ИБ_Имя      = ОписаниеИБ["name"];
	СУБД_Сервер = ОписаниеИБ["db-server"];
	СУБД_База   = ОписаниеИБ["db-name"];

	ИмяФайлаСтруктуры = СтрШаблон("dbstruct_%1.json", ИБ_Ид);

	ФайлСтруктуры = Новый Файл(ОбъединитьПути(Настройки.КаталогСтруктурыХраненияИБ(), ИмяФайлаСтруктуры));

	ПараметрыСУБД = Настройки.ПараметрыСУБДИБ(ИБ_Ид);

	Если НЕ ТипЗнч(ОписанияСтруктурыХраненияИБ) = Тип("Соответствие") Тогда
		ОписанияСтруктурыХраненияИБ = Новый Соответствие();
	КонецЕсли;

	ДанныеАктуальны = Ложь;

	СтруктураХраненияТаблицИБ = ОписанияСтруктурыХраненияИБ[ИБ_Ид];

	Если НЕ ТипЗнч(СтруктураХраненияТаблицИБ) = Тип("Соответствие") Тогда

		Если ФайлСтруктуры.Существует() Тогда
			Чтение = Новый ЧтениеJSON();
	
			Чтение.ОткрытьФайл(ФайлСтруктуры.ПолноеИмя, КодировкаТекста.UTF8);
			
			СтруктураХраненияТаблицИБ = ПрочитатьJSON(Чтение, Истина);
		Иначе
			СтруктураХраненияТаблицИБ = Новый Соответствие();
			СтруктураХраненияТаблицИБ.Вставить("МеткаВремени", 0);
		КонецЕсли;
	КонецЕсли;

	ДанныеАктуальны = ((ТекущаяУниверсальнаяДатаВМиллисекундах() -
	                   СтруктураХраненияТаблицИБ["МеткаВремени"]) <
	                   ПараметрыСУБД.СУБД_ВремяЖизни_Структуры);

	Если НЕ ДанныеАктуальны Тогда

		ПодключениеКСУБД = Новый ПодключениеMSSQL(СУБД_Сервер,
		                                          ПараметрыСУБД.СУБД_Пользователь,
		                                          ПараметрыСУБД.СУБД_Пароль);
		СтруктураХраненияИБ = Новый СтруктураХраненияИБ(ПодключениеКСУБД, СУБД_База);


		СтруктураХранения = СтруктураХраненияИБ.ОписаниеМетаданныхОбъектовБД1С();

		СтруктураХраненияТаблицИБ = Новый Соответствие();
		СтруктураХраненияТаблицИБ.Вставить("СУБД_Сервер"      , СУБД_Сервер);
		СтруктураХраненияТаблицИБ.Вставить("СУБД_База"        , СУБД_База);
		СтруктураХраненияТаблицИБ.Вставить("ИБ"               , ИБ_Имя);
		СтруктураХраненияТаблицИБ.Вставить("МеткаВремени"     , ТекущаяУниверсальнаяДатаВМиллисекундах());
		СтруктураХраненияТаблицИБ.Вставить("СтруктураХранения", СтруктураХранения);

		ОписанияСтруктурыХраненияИБ.Вставить(ИБ_Ид, СтруктураХраненияТаблицИБ);

		Запись = Новый ЗаписьJSON();
	
		Запись.ОткрытьФайл(ФайлСтруктуры.ПолноеИмя, "UTF-8");
		
		ЗаписатьJSON(Запись, СтруктураХраненияТаблицИБ);

		Запись.Закрыть();

	КонецЕСли;

	Возврат СтруктураХраненияТаблицИБ["СтруктураХранения"];

КонецФункции // СтруктураХраненияТаблицИБ()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийОбъекта

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//   НастройкиПодключения     - Строка      - путь к файлу настроек управления кластерами
//                              Структура     или структура настроек управления кластерами
//
Процедура ПриСозданииОбъекта(Знач НастройкиПодключения = Неопределено)

	ТипыОбъектовКластера1С = Новый Структура(Перечисления.РежимыАдминистрирования);
	ТипыОбъектовКластера1С.Вставить("БазыДанных", "database");
	ТипыОбъектовКластера1С.Вставить("Таблицы"   , "table");

	ТипыОбъектовКластера1С = Новый ФиксированнаяСтруктура(ТипыОбъектовКластера1С);

	ИнициализироватьАгентыУправленияКластерами(НастройкиПодключения);

КонецПроцедуры // ПриСозданииОбъекта()

#КонецОбласти // ОбработчикиСобытийОбъекта
