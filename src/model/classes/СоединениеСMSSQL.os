// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/hirac/
// ----------------------------------------------------------

#Использовать 1commands

Перем Лог;
Перем Сервер;        // - Строка    - адрес сервера MS SQL
Перем Пользователь;  // - Строка    - имя пользователя MS SQL
Перем Пароль;        // - Строка    - Пароль пользователя MS SQL

// Функция - возвращает тип СУБД
//
// Возвращаемое значение:
//  Строка        - тип СУБД
//
Функция ТипСУБД() Экспорт

	Возврат Перечисления.ТипыСУБД.MSSQLServer;

КонецФункции // ТипСУБД()

// Функция - возвращает адрес сервера СУБД
//
// Возвращаемое значение:
//  Строка        - адрес сервера СУБД
//
Функция Сервер() Экспорт

	Возврат Сервер;

КонецФункции // Сервер()

// Процедура - устанавливает адрес сервера СУБД
//
// Параметры:
//  НовоеЗначение    - Строка        - новый адрес сервера СУБД
//
Процедура УстановитьСервер(НовоеЗначение) Экспорт

	Сервер = НовоеЗначение

КонецПроцедуры // УстановитьСервер()

// Функция - возвращает имя пользователя СУБД
//
// Возвращаемое значение:
//  Строка        - имя пользователя СУБД
//
Функция Пользователь() Экспорт

	Возврат Пользователь;

КонецФункции // Пользователь()

// Процедура - устанавливает имя пользователя СУБД
//
// Параметры:
//  НовоеЗначение    - Строка        - новое имя пользователя СУБД
//
Процедура УстановитьПользователя(НовоеЗначение) Экспорт

	Пользователь = НовоеЗначение

КонецПроцедуры // УстановитьПользователя()

// Процедура - устанавливает пароль пользователя СУБД
//
// Параметры:
//  НовоеЗначение    - Строка        - новый пароль пользователя СУБД
//
Процедура УстановитьПароль(НовоеЗначение) Экспорт

	Пароль = НовоеЗначение

КонецПроцедуры // УстановитьПароль()

// Функция проверяет существование базу на сервере MS SQL
//
// Параметры:
//  База          - Строка       - Имя базы данных
//
// Возвращаемое значение:
//  Булево        - Истина       - база существует на сервере СУБД
//
Функция БазаСуществует(База) Экспорт

	ТекстЗапроса = СтрШаблон("""SET NOCOUNT ON;
	                         |
	                         |SELECT COUNT(name)
	                         |FROM
	                         |	sysdatabases
	                         |WHERE
	                         |	name = '%1';
	                         |
	                         |SET NOCOUNT OFF""",
	                         База);
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса);

	Если КодВозврата = 0 Тогда
		РезультатЗапроса = СокрЛП(СтрЗаменить(РезультатЗапроса, "-", ""));
		Возврат РезультатЗапроса = "1";
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // БазаСуществует()

// Функция - возвращает описание занимаеиого места в указанной базе MS SQL Server
//
// Параметры:
//  База          - Строка       - Имя базы данных
//
// Возвращаемое значение:
//  Структура                            - описание занимаего места
//     * РазмерБазы        - Число          - размер текущей базы данных в байтах, включает файлы данных и журналов
//     * Свободно          - Число          - место в базе данных, не зарезервированное для объектов базы данных
//     * Зарезервировано   - Число          - общий объем, выделенный объектам в базе данных
//     * Данные            - Число          - общий объем, используемый данными
//     * Индексы           - Число          - общий объем, используемый индексами
//     * НеИспользуется    - Число          - общий объем, зарезервированный для объектов в базе данных,
//                                            но пока не используемый
//
Функция ЗанимаемоеМесто(База) Экспорт

	ТекстЗапроса = СтрШаблон("""USE [%1];
	                         |
	                         |SET NOCOUNT ON;
	                         |
	                         |exec sp_spaceused @oneresultset=1;
	                         |
	                         |SET NOCOUNT OFF""",
	                         База);
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("РазмерБазы"     , 1);
	СтруктураРезультата.Вставить("Свободно"       , 2);
	СтруктураРезультата.Вставить("Зарезервировано", 3);
	СтруктураРезультата.Вставить("Данные"         , 4);
	СтруктураРезультата.Вставить("Индексы"        , 5);
	СтруктураРезультата.Вставить("НеИспользуется" , 6);

	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса, "|", Истина);

	Если КодВозврата = 0 Тогда
		Текст = Новый ТекстовыйДокумент();
		Текст.УстановитьТекст(РезультатЗапроса);
		
		МассивЗначений = СтрРазделить(Текст.ПолучитьСтроку(Текст.КоличествоСтрок()), "|");

		Для Каждого ТекЭлемент Из СтруктураРезультата Цикл
			Ключ = ТекЭлемент.Ключ;
			Индекс = ТекЭлемент.Значение;
			
			Если Индекс >= МассивЗначений.Количество() Тогда
				СтруктураРезультата[Ключ] = 0;
				Продолжить;
			КонецЕсли;

			Попытка
				Размерность = ВРег(Прав(СокрЛП(МассивЗначений[Индекс]), 2));
				СтруктураРезультата[Ключ] = Число(СокрЛП(Лев(МассивЗначений[Индекс],
				                                             СтрДлина(МассивЗначений[Индекс]) - СтрДлина(Размерность))));
				Если ВРег(Размерность) = "KB" Тогда
					СтруктураРезультата[Ключ] = СтруктураРезультата[Ключ] * 1024;
				ИначеЕсли ВРег(Размерность) = "MB" Тогда
					СтруктураРезультата[Ключ] = СтруктураРезультата[Ключ] * 1024 * 1024;
				КонецЕсли;
			Исключение
				СтруктураРезультата[Ключ] = 0;
			КонецПопытки;
		КонецЦикла;
	Иначе

		Для Каждого ТекЭлемент Из СтруктураРезультата Цикл
			СтруктураРезультата[ТекЭлемент.Ключ] = -1;
		КонецЦикла;

	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ЗанимаемоеМесто()

// Функция - возвращает список таблиц в указанной базе MS SQL Server
//
// Параметры:
//  База          - Строка       - Имя базы данных
//
// Возвращаемое значение:
//  Структура                            - описание занимаего места
//     * РазмерБазы        - Число          - размер текущей базы данных в байтах, включает файлы данных и журналов
//     * Свободно          - Число          - место в базе данных, не зарезервированное для объектов базы данных
//     * Зарезервировано   - Число          - общий объем, выделенный объектам в базе данных
//     * Данные            - Число          - общий объем, используемый данными
//     * Индексы           - Число          - общий объем, используемый индексами
//     * НеИспользуется    - Число          - общий объем, зарезервированный для объектов в базе данных,
//                                            но пока не используемый
//
Функция ТаблицыСУБД(База) Экспорт

	ТекстЗапроса = СтрШаблон("""USE [%1]; SET NOCOUNT ON;
	                         |
	                         |SELECT
	                         |	Tables.Name AS TableName,
	                         |	Schemas.Name AS SchemaName,
	                         |	Partitions.Rows AS RowCounts,
	                         |	SUM(AllocationUnits.total_pages) * 8192 AS TotalSpace,
	                         |	SUM(AllocationUnits.used_pages) * 8192 AS UsedSpace,
	                         |	(SUM(AllocationUnits.total_pages) - SUM(AllocationUnits.used_pages)) * 8192 AS UnusedSpace,
	                         |	SUM(user_seeks + user_scans + user_lookups) AS Reads,
	                         |	SUM(user_seeks) AS Seeks,
	                         |	SUM(user_scans) AS Scans,
	                         |	SUM(user_lookups) AS Lookups,
	                         |	SUM(user_updates) AS Writes
	                         |FROM
	                         |	sys.tables AS Tables
	                         |INNER JOIN sys.indexes AS Indexes
	                         |	ON Tables.object_id = Indexes.object_id
	                         |INNER JOIN sys.partitions AS Partitions
	                         |	ON Indexes.object_id = Partitions.object_id
	                         |		AND Indexes.index_id = Partitions.index_id
	                         |INNER JOIN sys.allocation_units AS AllocationUnits
	                         |	ON Partitions.partition_id = AllocationUnits.container_id
	                         |LEFT OUTER JOIN sys.schemas AS Schemas
	                         |	ON Tables.schema_id = Schemas.schema_id
	                         |LEFT OUTER sys.dm_db_index_usage_stats AS Stats
	                         |	ON Tables.object_id = Stats.object_id
	                         |WHERE
	                         |	Tables.Name NOT LIKE 'dt%'
	                         |		AND Tables.is_ms_shipped = 0
	                         |		AND Indexes.object_id > 255
	                         |GROUP BY
	                         |	Tables.Name,
	                         |	Schemas.Name,
	                         |	Partitions.Rows
	                         |ORDER BY
	                         |	Tables.Name;
	                         |
	                         |SET NOCOUNT OFF""",
	                         База);
	
	МассивРезультатов = Новый Массив();
	
	РезультатЗапроса = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, РезультатЗапроса, "|", Истина);

	Если КодВозврата = 0 Тогда
		Текст = Новый ТекстовыйДокумент();
		Текст.УстановитьТекст(РезультатЗапроса);
		
		ПерваяСтрока = 1;
		Для й = 1 По Текст.КоличествоСтрок() Цикл
			Если Лев(Текст.ПолучитьСтроку(й), 5) = "-----" Тогда
				ПерваяСтрока = й + 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Для й = ПерваяСтрока По Текст.КоличествоСтрок() Цикл

			СтруктураРезультата = Новый Структура();
			СтруктураРезультата.Вставить("Таблица"             , 0);
			СтруктураРезультата.Вставить("Схема"               , 1);
			СтруктураРезультата.Вставить("КоличествоСтрок"     , 2);
			СтруктураРезультата.Вставить("ВсегоЗанято"         , 3);
			СтруктураРезультата.Вставить("Используется"        , 4);
			СтруктураРезультата.Вставить("НеИспользуется"      , 5);
			СтруктураРезультата.Вставить("ОперацийЧтения"      , 6);
			СтруктураРезультата.Вставить("ОперацийВыборки"     , 7);
			СтруктураРезультата.Вставить("ОперацийСканирования", 8);
			СтруктураРезультата.Вставить("ОперацийПоиска"      , 9);
			СтруктураРезультата.Вставить("ОперацийЗаписи"      , 10);
		
			МассивЗначений = СтрРазделить(Текст.ПолучитьСтроку(й), "|");

			Для Каждого ТекЭлемент Из СтруктураРезультата Цикл
				Ключ = ТекЭлемент.Ключ;
				Индекс = ТекЭлемент.Значение;
				
				Если Индекс >= МассивЗначений.Количество() Тогда
					СтруктураРезультата[Ключ] = 0;
					Продолжить;
				КонецЕсли;

				Если ВРег(Ключ) = "ТАБЛИЦА"
				 ИЛИ ВРег(Ключ) = "СХЕМА" Тогда
					СтруктураРезультата[Ключ] = СокрЛП(МассивЗначений[Индекс]);
				Иначе
					Попытка
						СтруктураРезультата[Ключ] = Число(СокрЛП(МассивЗначений[Индекс]));
					Исключение
						СтруктураРезультата[Ключ] = 0;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;

			МассивРезультатов.Добавить(СтруктураРезультата);

		КонецЦикла;
	КонецЕсли;

	Возврат МассивРезультатов;

КонецФункции // ТаблицыСУБД()

// Функция возвращает описание установленной версии SQL Server
//
// Возвращаемое значение:
//	Структура            - описание версии SQL Server
//       ИмяСервера            - имя сервера
//       ИмяЭкземпляраСУБД     - имя экземпляра СУБД на сервере
//       Редакция              - номер редакции
//       Версия                - номер версии
//       Уровень               - уровень продукта
//       ВерсияМакс            - старший номер версии (2000 - 2000 (8)), 2005 - 9,
//                                                     2008 - 10, 2012 - 11, 2014 - 12, 2016 - 13)
//       Корп                  - признак Enterprise версии
//
Функция ВерсияСУБД() Экспорт
	
	ТекстЗапроса = """SET NOCOUNT ON;
	               |
                   |SELECT
                   |	SERVERPROPERTY('MachineName') AS ComputerName,
                   |	SERVERPROPERTY('ServerName') AS InstanceName,
                   |	SERVERPROPERTY('Edition') AS Edition,
                   |	SERVERPROPERTY('ProductVersion') AS ProductVersion,
                   |	SERVERPROPERTY('ProductLevel') AS ProductLevel""";
	
	ОписаниеРезультата = "";
	КодВозврата = ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата, "|", Истина);
		
	СтрокаОписанияВерсии = 3;
	ИмяСервера           = 0;
	ИмяЭкземпляраСУБД    = 1;
	Редакция             = 2;
	Версия               = 3;
	Уровень              = 4;
	
	// 2000 - 2000 (8)), 2005 - 9, 2008 - 10, 2012 - 11, 2014 - 12, 2016 - 13, 2017 - 14, 2019 - 15
	МассивВерсий = СтрРазделить("2000-8,9,10,11,12,13,14,15", ",");

	СоответствиеВерсий = Новый Соответствие();

	Для Каждого ТекВерсия Из МассивВерсий Цикл
		МассивВерсии = СтрРазделить(ТекВерсия, "-");

		Если МассивВерсии.Количество() = 1 Тогда
			СоответствиеВерсий.Вставить(МассивВерсии[0], Число(МассивВерсии[0]));
		ИначеЕсли МассивВерсии.Количество() > 1 Тогда
			СоответствиеВерсий.Вставить(МассивВерсии[0], Число(МассивВерсии[1]));
		КонецЕсли;
	КонецЦикла;
	
	Если КодВозврата = 0 Тогда
		СтруктураРезультата = Новый Структура();

		Текст = Новый ТекстовыйДокумент();
		Текст.УстановитьТекст(ОписаниеРезультата);
		
		МассивЗначений = СтрРазделить(Текст.ПолучитьСтроку(СтрокаОписанияВерсии), "|");

		СтруктураРезультата.Вставить("ИмяСервера"       , МассивЗначений[ИмяСервера]);
		СтруктураРезультата.Вставить("ИмяЭкземпляраСУБД", МассивЗначений[ИмяЭкземпляраСУБД]);
		СтруктураРезультата.Вставить("Редакция"         , МассивЗначений[Редакция]);
		СтруктураРезультата.Вставить("Версия"           , МассивЗначений[Версия]);
		СтруктураРезультата.Вставить("Уровень"          , МассивЗначений[Уровень]);
		
		МассивВерсии = СтрРазделить(СтруктураРезультата["Версия"], ".");
		СтруктураРезультата.Вставить("ВерсияМакс"       , СоответствиеВерсий[МассивВерсии[0]]);

		СтруктураРезультата.Вставить("Корп"             , СтрНайти(ВРег(СтруктураРезультата["Редакция"]), ВРег("Enterprise")) > 0);

		Возврат СтруктураРезультата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ВерсияСУБД()

// Функция выполняет запрос к СУБД (используется консольная утилита sqlcmd)
//
// Параметры:
//	ТекстЗапроса           - Строка       - текст исполняемого запроса
//	ОписаниеРезультата     - Строка       - результат выполнения команду
//	Разделитель            - Строка       - символ - разделитель колонок результата
//	УбратьПробелы          - Булево       - Истина - будут убраны выравнивающие пробелы из результата
//
// Возвращаемое значение:
//	Булево       - Истина - команда выполнена успешно
//
Функция ВыполнитьЗапросСУБД(ТекстЗапроса, ОписаниеРезультата = "", Разделитель = "", УбратьПробелы = Ложь)

	Лог.Отладка("Текст запроса: %1", ТекстЗапроса);
	
	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду("sqlcmd");
	КомандаРК.ДобавитьПараметр("-S " + КомандаРК.ОбернутьВКавычки(Сервер));
	Если ЗначениеЗаполнено(Пользователь) Тогда
		КомандаРК.ДобавитьПараметр("-U " + КомандаРК.ОбернутьВКавычки(Пользователь));
		Если ЗначениеЗаполнено(пароль) Тогда
			КомандаРК.ДобавитьПараметр("-P " + КомандаРК.ОбернутьВКавычки(Пароль));
		КонецЕсли;
	КонецЕсли;
	КомандаРК.ДобавитьПараметр("-Q " + КомандаРК.ОбернутьВКавычки(ТекстЗапроса));
	КомандаРК.ДобавитьПараметр("-b");

	Если ЗначениеЗаполнено(Разделитель) Тогда
		КомандаРК.ДобавитьПараметр(СтрШаблон("-s ""%1""", Разделитель));
	КонецЕсли;

	Если УбратьПробелы Тогда
		КомандаРК.ДобавитьПараметр("-W");
	КонецЕсли;

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы( Ложь );
	КомандаРК.ПоказыватьВыводНемедленно( Ложь );
	
	КодВозврата = КомандаРК.Исполнить();

	ОписаниеРезультата = КомандаРК.ПолучитьВывод();

	Возврат КодВозврата;

КонецФункции // ВыполнитьЗапросСУБД()
	
// Процедура инициализации объекта доступа к СУБД
//
// Параметры:
//  _Сервер           - Строка         - адрес сервера СУБД
//  _Пользователь     - Строка         - пользователь сервера СУБД
//  _Пароль           - Строка         - пароль пользователя сервера СУБД
//
// Возвращаемое значение:
// Булево       - Истина - команда выполнена успешно
//
Процедура ПриСозданииОбъекта(Знач _Сервер, Знач _Пользователь, Знач _Пароль) Экспорт
	
	Лог = ОбщегоНазначения.Лог();

	Сервер          = _Сервер;
	Пользователь    = _Пользователь;
	Пароль          = _Пароль;
	
КонецПроцедуры // ПриСозданииОбъекта()

